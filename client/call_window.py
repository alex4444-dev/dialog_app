import sys
import os
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                             QPushButton, QProgressBar, QMessageBox,
                             QComboBox, QGroupBox)
from PyQt5.QtCore import Qt, pyqtSignal, QTimer
import logging
import time
import struct
import threading
import numpy as np

logger = logging.getLogger('dialog_gui')

class CallWindow(QWidget):
    call_ended = pyqtSignal(str)
    call_accepted = pyqtSignal(str)
    call_rejected = pyqtSignal(str)
    
    def __init__(self, username, call_type, call_id, is_outgoing=True, parent=None):
        super().__init__(parent)
        self.username = username
        self.call_type = call_type
        self.call_id = call_id
        self.is_outgoing = is_outgoing
        self.is_active = False
        self.call_duration = 0
        self.duration_timer = QTimer()
        self.audio_initialized = False
        self.call_ended_emitted = False
        self.audio_stream = None
        self.audio_available = False
        self.accept_button_clicked = False
        
        # –ê—É–¥–∏–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.sample_rate = 44100
        self.channels = 1
        self.dtype = 'float32'
        self.blocksize = 1024
        
        # –ë—É—Ñ–µ—Ä –¥–ª—è –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
        self.audio_buffer = []
        self.buffer_size = 10
        self.audio_buffer_lock = threading.Lock()
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        self.sent_packets = 0
        self.received_packets = 0
        
        self.init_ui()
        self.detect_audio_system()
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–∫–Ω–∞ –∑–≤–æ–Ω–∫–∞"""
        self.setWindowTitle(f"üìû –ó–≤–æ–Ω–æ–∫ —Å {self.username}")
        self.setFixedSize(500, 400)
        self.setWindowFlags(Qt.WindowStaysOnTopHint)
        
        layout = QVBoxLayout()
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_text = "–ò—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫" if self.is_outgoing else "–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫"
        title_label = QLabel(f"üìû {title_text}")
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet("font-size: 18px; font-weight: bold; color: #2c3e50;")
        layout.addWidget(title_label)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–æ–Ω–∫–µ
        info_label = QLabel(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.username}\n–¢–∏–ø: {self.call_type}")
        info_label.setAlignment(Qt.AlignCenter)
        info_label.setStyleSheet("font-size: 14px; color: #34495e;")
        layout.addWidget(info_label)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤—É–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
        self.audio_system_label = QLabel("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        self.audio_system_label.setAlignment(Qt.AlignCenter)
        self.audio_system_label.setStyleSheet("font-size: 11px; color: #7f8c8d; font-style: italic;")
        layout.addWidget(self.audio_system_label)
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.diagnostic_label = QLabel("–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        self.diagnostic_label.setAlignment(Qt.AlignCenter)
        self.diagnostic_label.setStyleSheet("font-size: 10px; color: #e74c3c;")
        layout.addWidget(self.diagnostic_label)
        
        # –¢–∞–π–º–µ—Ä –∑–≤–æ–Ω–∫–∞
        self.duration_label = QLabel("00:00")
        self.duration_label.setAlignment(Qt.AlignCenter)
        self.duration_label.setStyleSheet("font-size: 24px; font-weight: bold; color: #27ae60;")
        self.duration_label.setVisible(False)
        layout.addWidget(self.duration_label)
        
        # –°—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞
        self.status_label = QLabel("–ù–∞–±–æ—Ä –Ω–æ–º–µ—Ä–∞..." if self.is_outgoing else "–í—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤...")
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.setStyleSheet("font-size: 12px; color: #7f8c8d;")
        layout.addWidget(self.status_label)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (–¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏)
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 0)  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        self.progress_bar.setVisible(True)
        layout.addWidget(self.progress_bar)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–º
        buttons_layout = QHBoxLayout()
        
        if self.is_outgoing:
            # –î–ª—è –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ - —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            self.end_button = QPushButton("üìû –ó–∞–≤–µ—Ä—à–∏—Ç—å")
            self.end_button.setStyleSheet("""
                QPushButton {
                    background-color: #e74c3c;
                    color: white;
                    border: none;
                    padding: 10px;
                    border-radius: 5px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #c0392b;
                }
            """)
            self.end_button.clicked.connect(self.end_call)
            buttons_layout.addWidget(self.end_button)
            
        else:
            # –î–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ - –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            self.accept_button = QPushButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å")
            self.accept_button.setStyleSheet("""
                QPushButton {
                    background-color: #27ae60;
                    color: white;
                    border: none;
                    padding: 10px;
                    border-radius: 5px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #219a52;
                }
            """)
            self.accept_button.clicked.connect(self.safe_accept_call)
            
            self.reject_button = QPushButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å")
            self.reject_button.setStyleSheet("""
                QPushButton {
                    background-color: #e74c3c;
                    color: white;
                    border: none;
                    padding: 10px;
                    border-radius: 5px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #c0392b;
                }
            """)
            self.reject_button.clicked.connect(self.safe_reject_call)
            
            buttons_layout.addWidget(self.accept_button)
            buttons_layout.addWidget(self.reject_button)
        
        layout.addLayout(buttons_layout)
        
        self.setLayout(layout)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞
        self.duration_timer.timeout.connect(self.update_duration)
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.diagnostic_timer = QTimer()
        self.diagnostic_timer.timeout.connect(self.update_diagnostic_info)
        self.diagnostic_timer.start(1000)  # –û–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    
    def update_diagnostic_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        if self.is_active:
            info = f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.sent_packets} | –ü–æ–ª—É—á–µ–Ω–æ: {self.received_packets} | –ë—É—Ñ–µ—Ä: {len(self.audio_buffer)}"
            self.diagnostic_label.setText(info)
    
    def safe_accept_call(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–≤–æ–Ω–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è"""
        if self.accept_button_clicked:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞ {self.call_id}")
            return
            
        self.accept_button_clicked = True
        self.accept_call()
    
    def safe_reject_call(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è"""
        if self.accept_button_clicked:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞ {self.call_id}")
            return
            
        self.accept_button_clicked = True
        self.reject_call()
        
    def detect_audio_system(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã - –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            import sounddevice as sd
            self.sd = sd
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ
            devices = sd.query_devices()
            if len(devices) > 0:
                self.audio_available = True
                audio_system = "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–≤—É–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞"
            else:
                self.audio_available = False
                audio_system = "–ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                
            self.audio_system_label.setText(audio_system)
            logger.info(f"–ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞: {audio_system}")
            
        except ImportError:
            self.audio_available = False
            self.audio_system_label.setText("SoundDevice –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            logger.warning("SoundDevice –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            self.audio_available = False
            self.audio_system_label.setText(f"–û—à–∏–±–∫–∞ –∞—É–¥–∏–æ: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
    
    def start_call(self):
        """–ù–∞—á–∞—Ç—å –∑–≤–æ–Ω–æ–∫ (–ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è)"""
        try:
            if self.is_active:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–≤–æ–Ω–∫–∞ {self.call_id}")
                return
                
            self.is_active = True
            self.status_label.setText("–ó–≤–æ–Ω–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω")
            self.status_label.setStyleSheet("font-size: 12px; color: #27ae60;")
            self.progress_bar.setVisible(False)
            self.duration_label.setVisible(True)
            self.call_ended_emitted = False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.call_start_time = time.time()
            self.duration_timer.start(1000)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∏
            if self.audio_available and self.call_type in ['audio', 'video']:
                self.initialize_real_audio_streams()
                logger.info("–†–µ–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã")
            else:
                logger.info(f"–ó–≤–æ–Ω–æ–∫ {self.call_id} –Ω–∞—á–∞—Ç –±–µ–∑ –∞—É–¥–∏–æ")
            
            logger.info(f"–ó–≤–æ–Ω–æ–∫ {self.call_id} –Ω–∞—á–∞—Ç")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞: {e}")
            self.show_audio_error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞")
    
    def initialize_real_audio_streams(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if self.audio_initialized:
                logger.info("–ê—É–¥–∏–æ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
                return
            
            import sounddevice as sd
            
            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ: sample_rate={self.sample_rate}, channels={self.channels}")

            # Callback –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            def input_callback(indata, frames, time, status):
                if status:
                    logger.debug(f"–ê—É–¥–∏–æ –≤—Ö–æ–¥–Ω–æ–π —Å—Ç–∞—Ç—É—Å: {status}")
                
                try:
                    if hasattr(self, 'call_socket') and self.call_socket and self.is_active:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
                        audio_data = indata.copy()
                        self.send_audio_data(audio_data.tobytes())
                        self.sent_packets += 1
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 100 –ø–∞–∫–µ—Ç–æ–≤
                        if self.sent_packets % 100 == 0:
                            logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤: {self.sent_packets}")
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –≤ input callback: {e}")

            # Callback –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
            def output_callback(outdata, frames, time, status):
                if status:
                    logger.debug(f"–ê—É–¥–∏–æ –≤—ã—Ö–æ–¥–Ω–æ–π —Å—Ç–∞—Ç—É—Å: {status}")
                
                try:
                    with self.audio_buffer_lock:
                        if self.audio_buffer and self.is_active:
                            # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞
                            audio_data = self.audio_buffer.pop(0)
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
                            if len(audio_data) == len(outdata):
                                outdata[:] = audio_data
                            else:
                                # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –æ–±—Ä–µ–∑–∞–µ–º –∏–ª–∏ –¥–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏
                                min_len = min(len(audio_data), len(outdata))
                                outdata[:min_len] = audio_data[:min_len]
                                if min_len < len(outdata):
                                    outdata[min_len:] = 0
                        else:
                            # –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø—É—Å—Ç - —Ç–∏—à–∏–Ω–∞
                            outdata.fill(0)
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –≤ output callback: {e}")
                    outdata.fill(0)

            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –∏ –≤—ã–≤–æ–¥–∞
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ InputStream...")
            self.input_stream = sd.InputStream(
                samplerate=self.sample_rate,
                blocksize=self.blocksize,
                channels=self.channels,
                callback=input_callback,
                dtype=self.dtype
            )

            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ OutputStream...")
            self.output_stream = sd.OutputStream(
                samplerate=self.sample_rate,
                blocksize=self.blocksize,
                channels=self.channels,
                callback=output_callback,
                dtype=self.dtype
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
            logger.info("–ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤...")
            self.input_stream.start()
            self.output_stream.start()
            self.audio_initialized = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
            self.start_audio_receiver()
            
            logger.info("‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ –∑–∞–ø—É—â–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤: {e}")
            self.audio_initialized = False

    def send_audio_data(self, audio_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç"""
        try:
            if (hasattr(self, 'call_socket') and self.call_socket 
                and self.is_active and self.audio_initialized):
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–∞–∑–º–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö
                header = struct.pack('I', len(audio_data))
                full_data = header + audio_data
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                self.call_socket.send(full_data)
                return True
            else:
                logger.warning("–ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ: –Ω–µ—Ç —Å–æ–∫–µ—Ç–∞ –∏–ª–∏ –ø–æ—Ç–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def receive_audio_data(self):
        """–ü—Ä–∏–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–∫–µ—Ç–∞"""
        try:
            if (hasattr(self, 'call_socket') and self.call_socket 
                and self.is_active and self.audio_initialized):
                
                # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–∞–∑–º–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö
                header = self.call_socket.recv(4)
                if not header:
                    logger.warning("–ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö")
                    return
                    
                data_size = struct.unpack('I', header)[0]
                
                # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
                audio_data = b''
                while len(audio_data) < data_size:
                    chunk = self.call_socket.recv(data_size - len(audio_data))
                    if not chunk:
                        logger.warning("–ù–µ–ø–æ–ª–Ω—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ")
                        break
                    audio_data += chunk
                
                if len(audio_data) == data_size:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–π—Ç—ã –≤ numpy array
                    audio_array = np.frombuffer(audio_data, dtype=self.dtype)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
                    with self.audio_buffer_lock:
                        if len(self.audio_buffer) < self.buffer_size:
                            self.audio_buffer.append(audio_array)
                        else:
                            # –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø–æ–ª–æ–Ω, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç
                            self.audio_buffer.pop(0)
                            self.audio_buffer.append(audio_array)
                    
                    self.received_packets += 1
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 100 –ø–∞–∫–µ—Ç–æ–≤
                    if self.received_packets % 100 == 0:
                        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤: {self.received_packets}")
                else:
                    logger.warning(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –ø–æ–ª—É—á–µ–Ω–æ {len(audio_data)} –∏–∑ {data_size} –±–∞–π—Ç")
                        
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–µ–º–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def start_audio_receiver(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö"""
        def audio_receiver():
            logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–µ–º–Ω–∏–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö")
            while self.is_active and hasattr(self, 'call_socket') and self.call_socket:
                try:
                    self.receive_audio_data()
                except Exception as e:
                    if self.is_active:
                        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –∞—É–¥–∏–æ –ø—Ä–∏–µ–º–Ω–∏–∫–µ: {e}")
                    break
            logger.info("–ü—Ä–∏–µ–º–Ω–∏–∫ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        self.audio_receiver_thread = threading.Thread(target=audio_receiver, daemon=True)
        self.audio_receiver_thread.start()

    def stop_audio_streams(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ-–ø–æ—Ç–æ–∫–æ–≤ - –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            if hasattr(self, 'input_stream') and self.input_stream is not None:
                try:
                    self.input_stream.stop()
                except Exception:
                    pass
                try:
                    self.input_stream.close()
                except Exception:
                    pass
                self.input_stream = None
                
            if hasattr(self, 'output_stream') and self.output_stream is not None:
                try:
                    self.output_stream.stop()
                except Exception:
                    pass
                try:
                    self.output_stream.close()
                except Exception:
                    pass
                self.output_stream = None
                
            self.audio_initialized = False
            logger.info("–ê—É–¥–∏–æ –ø–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤: {e}")
    
    def update_duration(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞"""
        try:
            if hasattr(self, 'call_start_time') and self.is_active:
                self.call_duration = int(time.time() - self.call_start_time)
                minutes = self.call_duration // 60
                seconds = self.call_duration % 60
                self.duration_label.setText(f"{minutes:02d}:{seconds:02d}")
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
    
    def accept_call(self):
        """–ü—Ä–∏–Ω—è—Ç—å –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫"""
        try:
            if self.is_active:
                logger.warning(f"–ó–≤–æ–Ω–æ–∫ {self.call_id} —É–∂–µ –ø—Ä–∏–Ω—è—Ç")
                return
                
            self.is_active = True
            self.status_label.setText("–ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç")
            
            # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            self.accept_button.setVisible(False)
            self.reject_button.setVisible(False)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            self.end_button = QPushButton("üìû –ó–∞–≤–µ—Ä—à–∏—Ç—å")
            self.end_button.setStyleSheet("""
                QPushButton {
                    background-color: #e74c3c;
                    color: white;
                    border: none;
                    padding: 10px;
                    border-radius: 5px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #c0392b;
                }
            """)
            self.end_button.clicked.connect(self.end_call)
            self.layout().addWidget(self.end_button)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–≤–æ–Ω–æ–∫
            self.start_call()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–≤–æ–Ω–∫–∞
            self.call_accepted.emit(self.call_id)
            
            logger.info(f"–ó–≤–æ–Ω–æ–∫ {self.call_id} –ø—Ä–∏–Ω—è—Ç")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞: {e}")
    
    def reject_call(self):
        """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫"""
        try:
            self.status_label.setText("–ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            self.call_rejected.emit(self.call_id)
            self.close()
            
            logger.info(f"–ó–≤–æ–Ω–æ–∫ {self.call_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞: {e}")
    
    def end_call(self):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–≤–æ–Ω–æ–∫"""
        if getattr(self, 'call_ended_emitted', False):
            return

        try:
            self.is_active = False
            self.call_ended_emitted = True
            self.duration_timer.stop()
            self.diagnostic_timer.stop()
            self.stop_audio_streams()
            self.call_ended.emit(self.call_id)
            
            logger.info(f"–ó–≤–æ–Ω–æ–∫ {self.call_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞: {e}")
    
    def show_audio_error(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –∞—É–¥–∏–æ"""
        self.diagnostic_label.setText(f"–û—à–∏–±–∫–∞: {message}")
        self.diagnostic_label.setStyleSheet("font-size: 10px; color: #e74c3c;")

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        try:
            if self.is_active:
                self.end_call()
            else:
                self.stop_audio_streams()
            event.accept()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ –∑–≤–æ–Ω–∫–∞: {e}")
            event.accept()