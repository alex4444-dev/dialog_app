import sys
import os
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                             QPushButton, QProgressBar, QMessageBox,
                             QComboBox, QGroupBox)
from PyQt5.QtCore import Qt, pyqtSignal, QTimer
import logging
import time

logger = logging.getLogger('dialog_gui')

class CallWindow(QWidget):
    call_ended = pyqtSignal(str)
    call_accepted = pyqtSignal(str)
    call_rejected = pyqtSignal(str)
    
    def __init__(self, username, call_type, call_id, is_outgoing=True, parent=None):
        super().__init__(parent)
        self.username = username
        self.call_type = call_type
        self.call_id = call_id
        self.is_outgoing = is_outgoing
        self.is_active = False
        self.call_duration = 0
        self.duration_timer = QTimer()
        self.audio_initialized = False
        self.call_ended_emitted = False
        self.audio_stream = None
        self.audio_available = False
        self.accept_button_clicked = False  # ‚úÖ –ó–ê–©–ò–¢–ê –û–¢ –ú–ù–û–ì–û–ö–†–ê–¢–ù–û–ì–û –ù–ê–ñ–ê–¢–ò–Ø
        
        self.init_ui()
        self.detect_audio_system()
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–∫–Ω–∞ –∑–≤–æ–Ω–∫–∞"""
        self.setWindowTitle(f"üìû –ó–≤–æ–Ω–æ–∫ —Å {self.username}")
        self.setFixedSize(500, 400)
        self.setWindowFlags(Qt.WindowStaysOnTopHint)
        
        layout = QVBoxLayout()
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_text = "–ò—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫" if self.is_outgoing else "–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫"
        title_label = QLabel(f"üìû {title_text}")
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet("font-size: 18px; font-weight: bold; color: #2c3e50;")
        layout.addWidget(title_label)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–æ–Ω–∫–µ
        info_label = QLabel(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.username}\n–¢–∏–ø: {self.call_type}")
        info_label.setAlignment(Qt.AlignCenter)
        info_label.setStyleSheet("font-size: 14px; color: #34495e;")
        layout.addWidget(info_label)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤—É–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
        self.audio_system_label = QLabel("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        self.audio_system_label.setAlignment(Qt.AlignCenter)
        self.audio_system_label.setStyleSheet("font-size: 11px; color: #7f8c8d; font-style: italic;")
        layout.addWidget(self.audio_system_label)
        
        # –¢–∞–π–º–µ—Ä –∑–≤–æ–Ω–∫–∞
        self.duration_label = QLabel("00:00")
        self.duration_label.setAlignment(Qt.AlignCenter)
        self.duration_label.setStyleSheet("font-size: 24px; font-weight: bold; color: #27ae60;")
        self.duration_label.setVisible(False)
        layout.addWidget(self.duration_label)
        
        # –°—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞
        self.status_label = QLabel("–ù–∞–±–æ—Ä –Ω–æ–º–µ—Ä–∞..." if self.is_outgoing else "–í—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤...")
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.setStyleSheet("font-size: 12px; color: #7f8c8d;")
        layout.addWidget(self.status_label)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (–¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏)
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 0)  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        self.progress_bar.setVisible(True)
        layout.addWidget(self.progress_bar)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–º
        buttons_layout = QHBoxLayout()
        
        if self.is_outgoing:
            # –î–ª—è –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ - —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            self.end_button = QPushButton("üìû –ó–∞–≤–µ—Ä—à–∏—Ç—å")
            self.end_button.setStyleSheet("""
                QPushButton {
                    background-color: #e74c3c;
                    color: white;
                    border: none;
                    padding: 10px;
                    border-radius: 5px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #c0392b;
                }
            """)
            self.end_button.clicked.connect(self.end_call)
            buttons_layout.addWidget(self.end_button)
            
        else:
            # –î–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ - –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            self.accept_button = QPushButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å")
            self.accept_button.setStyleSheet("""
                QPushButton {
                    background-color: #27ae60;
                    color: white;
                    border: none;
                    padding: 10px;
                    border-radius: 5px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #219a52;
                }
            """)
            self.accept_button.clicked.connect(self.safe_accept_call)  # ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–´–ô –í–´–ó–û–í
            
            self.reject_button = QPushButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å")
            self.reject_button.setStyleSheet("""
                QPushButton {
                    background-color: #e74c3c;
                    color: white;
                    border: none;
                    padding: 10px;
                    border-radius: 5px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #c0392b;
                }
            """)
            self.reject_button.clicked.connect(self.safe_reject_call)  # ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–´–ô –í–´–ó–û–í
            
            buttons_layout.addWidget(self.accept_button)
            buttons_layout.addWidget(self.reject_button)
        
        layout.addLayout(buttons_layout)
        
        self.setLayout(layout)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞
        self.duration_timer.timeout.connect(self.update_duration)
    
    def safe_accept_call(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–≤–æ–Ω–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è"""
        if self.accept_button_clicked:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞ {self.call_id}")
            return
            
        self.accept_button_clicked = True
        self.accept_call()
    
    def safe_reject_call(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è"""
        if self.accept_button_clicked:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞ {self.call_id}")
            return
            
        self.accept_button_clicked = True
        self.reject_call()
        
    def detect_audio_system(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã - –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            # ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò AUDIO
            try:
                import sounddevice as sd
                self.sd = sd
                
                # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ
                devices = sd.query_devices()
                logger.info(f"üîä –ù–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(devices)}")
                
                default_input = sd.default.device[0]
                default_output = sd.default.device[1]
                logger.info(f"üé§ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_input}")
                logger.info(f"üîä –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_output}")

                if len(devices) > 0:
                    self.audio_available = True
                    audio_system = f"–ê—É–¥–∏–æ –¥–æ—Å—Ç—É–ø–Ω–æ ({len(devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤)"

                    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
                    QTimer.singleShot(1000, self.test_audio_system)
                else:
                    self.audio_available = False
                    audio_system = "–ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                    
                self.audio_system_label.setText(audio_system)
                logger.info(f"–ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞: {audio_system}")
                
            except ImportError:
                self.audio_available = False
                self.audio_system_label.setText("SoundDevice –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                logger.warning("SoundDevice –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                self.audio_available = False
                self.audio_system_label.setText(f"–û—à–∏–±–∫–∞ –∞—É–¥–∏–æ: {str(e)}")
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–≤—É–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
            self.audio_available = False
            self.audio_system_label.setText("–ê—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    
    def start_call(self):
        """–ù–∞—á–∞—Ç—å –∑–≤–æ–Ω–æ–∫ (–ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è) - –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            if self.is_active:  # ‚úÖ –ó–ê–©–ò–¢–ê –û–¢ –ü–û–í–¢–û–†–ù–û–ì–û –ó–ê–ü–£–°–ö–ê
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–≤–æ–Ω–∫–∞ {self.call_id}")
                return
                
            self.is_active = True
            self.status_label.setText("–ó–≤–æ–Ω–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω")
            self.status_label.setStyleSheet("font-size: 12px; color: #27ae60;")
            self.progress_bar.setVisible(False)
            self.duration_label.setVisible(True)
            self.call_ended_emitted = False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.call_start_time = time.time()
            self.duration_timer.start(1000)
            
            # ‚úÖ –û–¢–õ–û–ñ–ï–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ê–£–î–ò–û –î–õ–Ø –ò–ó–ë–ï–ñ–ê–ù–ò–Ø –û–®–ò–ë–û–ö
            if self.audio_available and self.call_type in ['audio', 'video']:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                QTimer.singleShot(100, self.safe_initialize_audio)
            else:
                logger.info(f"–ó–≤–æ–Ω–æ–∫ {self.call_id} –Ω–∞—á–∞—Ç –±–µ–∑ –∞—É–¥–∏–æ")
            
            logger.info(f"–ó–≤–æ–Ω–æ–∫ {self.call_id} –Ω–∞—á–∞—Ç")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞: {e}")
            self.show_audio_error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞")
    
    def safe_initialize_audio(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        try:
            if self.audio_initialized:  # ‚úÖ –ó–ê–©–ò–¢–ê –û–¢ –ü–û–í–¢–û–†–ù–û–ô –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
                return

            # –í–ú–ï–°–¢–û —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é
            self.initialize_real_audio_streams()
            self.audio_initialized = True
            logger.info("–†–µ–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                
            import sounddevice as sd
            import numpy as np
            
            # ‚úÖ –ü–†–û–°–¢–´–ï –ò –ë–ï–ó–û–ü–ê–°–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´
            self.sample_rate = 44100
            self.channels = 1
            self.dtype = 'float32'
            self.blocksize = 1024

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É—Ñ–µ—Ä–∞
            self.audio_buffer = []
            self.buffer_size = 10

            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ: sample_rate={self.sample_rate}, channels={self.channels}")
            
            # Callback –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            def input_callback(indata, outdata, frames, time, status):
                if status:
                    logger.info(f"–ê—É–¥–∏–æ –≤—Ö–æ–¥–Ω–æ–π —Å—Ç–∞—Ç—É—Å: {status}")
                
                    try:
                        if hasattr(self, 'call_socket') and self.call_socket and self.is_active:
                           # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
                           audio_data = indata.copy()
                           logger.debug(f"–ó–∞—Ö–≤–∞—á–µ–Ω–æ –∞—É–¥–∏–æ: {len(audio_data)} samples, –º–∞–∫—Å. –∞–º–ø–ª–∏—Ç—É–¥–∞: {np.max(np.abs(audio_data)):.4f}")
                           self.send_audio_data(audio_data.tobytes())
                        else:
                           logger.warning("–ù–µ—Ç —Å–æ–∫–µ—Ç–∞ –∏–ª–∏ –∑–≤–æ–Ω–æ–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ") 
                    except Exception:
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –≤ callback
                        logger.error(f"–û—à–∏–±–∫–∞ –≤ input callback: {e}")

            # Callback –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
            def output_callback(outdata, frames, time, status):
                if status:
                    logger.info(f"–ê—É–¥–∏–æ –≤—ã—Ö–æ–¥–Ω–æ–π —Å—Ç–∞—Ç—É—Å: {status}")
            
                try:
                    if self.audio_buffer and self.is_active:
                        # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞
                        audio_data = self.audio_buffer.pop(0)
                        outdata[:] = audio_data
                        logger.debug(f"–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ: {len(audio_data)} samples")
                    else:
                        # –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø—É—Å—Ç - —Ç–∏—à–∏–Ω–∞
                        outdata.fill(0)
                        if self.is_active:
                            logger.debug("–ë—É—Ñ–µ—Ä –∞—É–¥–∏–æ –ø—É—Å—Ç - –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–∏—à–∏–Ω–∞")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ output callback: {e}")
                    outdata.fill(0)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –∏ –≤—ã–≤–æ–¥–∞
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ InputStream...")
            self.input_stream = sd.InputStream(
                samplerate=self.sample_rate,
                blocksize=self.blocksize,
                channels=self.channels,
                callback=input_callback,
                dtype=self.dtype
            )

            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ OutputStream...")
            self.output_stream = sd.OutputStream(
                samplerate=self.sample_rate,
                blocksize=self.blocksize,
                channels=self.channels,
                callback=output_callback,
                dtype=self.dtype
            )   
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
            logger.info("–ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤...")
            self.input_stream.start()
            self.output_stream.start()
            self.audio_initialized = True
        
            logger.info("‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ –∑–∞–ø—É—â–µ–Ω—ã")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫: {e}")
            self.audio_initialized = False
            # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - –∑–≤–æ–Ω–æ–∫ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∞—É–¥–∏–æ
    
    def stop_audio_streams(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ-–ø–æ—Ç–æ–∫–æ–≤ - –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            if hasattr(self, 'audio_stream') and self.audio_stream is not None:
                try:
                    self.audio_stream.stop()
                except Exception:
                    pass
                try:
                    self.audio_stream.close()
                except Exception:
                    pass
                self.audio_stream = None
                self.audio_initialized = False
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤: {e}")
    
    def update_duration(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞"""
        try:
            if hasattr(self, 'call_start_time') and self.is_active:
                self.call_duration = int(time.time() - self.call_start_time)
                minutes = self.call_duration // 60
                seconds = self.call_duration % 60
                self.duration_label.setText(f"{minutes:02d}:{seconds:02d}")
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
    
    def accept_call(self):
        """–ü—Ä–∏–Ω—è—Ç—å –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫"""
        try:
            if self.is_active:  # ‚úÖ –ó–ê–©–ò–¢–ê –û–¢ –ü–û–í–¢–û–†–ù–û–ì–û –ü–†–ò–ù–Ø–¢–ò–Ø
                logger.warning(f"–ó–≤–æ–Ω–æ–∫ {self.call_id} —É–∂–µ –ø—Ä–∏–Ω—è—Ç")
                return
                
            self.is_active = True
            self.status_label.setText("–ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç")
            
            # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            self.accept_button.setVisible(False)
            self.reject_button.setVisible(False)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            self.end_button = QPushButton("üìû –ó–∞–≤–µ—Ä—à–∏—Ç—å")
            self.end_button.setStyleSheet("""
                QPushButton {
                    background-color: #e74c3c;
                    color: white;
                    border: none;
                    padding: 10px;
                    border-radius: 5px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #c0392b;
                }
            """)
            self.end_button.clicked.connect(self.end_call)
            self.layout().addWidget(self.end_button)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–≤–æ–Ω–æ–∫
            self.start_call()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–≤–æ–Ω–∫–∞
            self.call_accepted.emit(self.call_id)
            
            logger.info(f"–ó–≤–æ–Ω–æ–∫ {self.call_id} –ø—Ä–∏–Ω—è—Ç")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞: {e}")
    
    def reject_call(self):
        """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫"""
        try:
            self.status_label.setText("–ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            self.call_rejected.emit(self.call_id)
            self.close()
            
            logger.info(f"–ó–≤–æ–Ω–æ–∫ {self.call_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞: {e}")
    
    def end_call(self):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫"""
        if getattr(self, 'call_ended_emitted', False):
            return

        try:
            self.is_active = False
            self.call_ended_emitted = True
            self.duration_timer.stop()
            self.stop_audio_streams()
            self.call_ended.emit(self.call_id)
            
            logger.info(f"–ó–≤–æ–Ω–æ–∫ {self.call_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞: {e}")
    
    def initialize_real_audio_streams(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if self.audio_initialized:
                return
            
            import sounddevice as sd
            import numpy as np
        
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–¥–∏–æ
            self.sample_rate = 44100
            self.channels = 1
            self.dtype = 'float32'
            self.blocksize = 1024
        
            # –ë—É—Ñ–µ—Ä –¥–ª—è –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
            self.audio_buffer = []
            self.buffer_size = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤ –≤ –±—É—Ñ–µ—Ä–µ

            # Callback –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            def input_callback(indata, frames, time, status):
                if status:
                    logger.debug(f"–ê—É–¥–∏–æ –≤—Ö–æ–¥–Ω–æ–π —Å—Ç–∞—Ç—É—Å: {status}")
            
                try:
                    if hasattr(self, 'call_socket') and self.call_socket and self.is_active:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
                        audio_data = indata.copy()
                        self.send_audio_data(audio_data.tobytes())
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –≤ input callback: {e}")
            
            # Callback –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
            def output_callback(outdata, frames, time, status):
                if status:
                    logger.debug(f"–ê—É–¥–∏–æ –≤—ã—Ö–æ–¥–Ω–æ–π —Å—Ç–∞—Ç—É—Å: {status}")
            
                try:
                    if self.audio_buffer and self.is_active:
                        # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞
                        audio_data = self.audio_buffer.pop(0)
                        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ outdata, –æ–±—Ä–µ–∑–∞—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        min_frames = min(audio_data.shape[0], outdata.shape[0])
                        outdata[:min_frames] = audio_data[:min_frames]
                        
                        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–æ—á–µ —á–µ–º outdata, –∑–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –Ω—É–ª—è–º–∏
                        if min_frames < outdata.shape[0]:
                            outdata[min_frames:] = 0
                        else:
                            # –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø—É—Å—Ç - —Ç–∏—à–∏–Ω–∞
                            outdata.fill(0)
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –≤ output callback: {e}")
                    outdata.fill(0)

            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –∏ –≤—ã–≤–æ–¥–∞
            self.input_stream = sd.InputStream(
               samplerate=self.sample_rate,
               blocksize=self.blocksize,
               channels=self.channels,
               callback=input_callback,
               dtype=self.dtype
            )

            self.output_stream = sd.OutputStream(
               samplerate=self.sample_rate,
               blocksize=self.blocksize,
               channels=self.channels,
               callback=output_callback,
               dtype=self.dtype
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
            self.input_stream.start()
            self.output_stream.start()
            self.audio_initialized = True
        
            logger.info("–†–µ–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤: {e}")
            self.audio_initialized = False

    def start_audio_receiver(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö"""
        import threading
    
        def audio_receiver():
            while self.is_active and hasattr(self, 'call_socket') and self.call_socket:
                try:
                    self.receive_audio_data()
                except Exception as e:
                    if self.is_active:
                        logger.debug(f"–û—à–∏–±–∫–∞ –≤ –∞—É–¥–∏–æ –ø—Ä–∏–µ–º–Ω–∏–∫–µ: {e}")
                    break
    
        self.audio_receiver_thread = threading.Thread(target=audio_receiver, daemon=True)
        self.audio_receiver_thread.start()

    def send_audio_data(self, audio_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç"""
        try:
            if (hasattr(self, 'call_socket') and self.call_socket 
                and self.is_active and self.audio_initialized):
            
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö: {len(audio_data)} –±–∞–π—Ç")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–∞–∑–º–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö
                header = struct.pack('I', len(audio_data))
                total_sent = self.call_socket.send(header + audio_data)
                logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {total_sent} –±–∞–π—Ç")
            else:
                logger.warning("–ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ: –Ω–µ—Ç —Å–æ–∫–µ—Ç–∞ –∏–ª–∏ –ø–æ—Ç–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")   
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def receive_audio_data(self):
        """–ü—Ä–∏–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–∫–µ—Ç–∞"""
        try:
            if (hasattr(self, 'call_socket') and self.call_socket 
                and self.is_active and self.audio_initialized):
            
                # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–∞–∑–º–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö
                header = self.call_socket.recv(4)
                if not header:
                    logger.warning("–ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö")
                    return
                
                data_size = struct.unpack('I', header)[0]
                logger.debug(f"üì• –û–∂–∏–¥–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö: {data_size} –±–∞–π—Ç")
            
                # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
                audio_data = b''
                while len(audio_data) < data_size:
                    chunk = self.call_socket.recv(data_size - len(audio_data))
                    if not chunk:
                        logger.warning("–ù–µ–ø–æ–ª–Ω—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ")
                        break
                    audio_data += chunk
            
                if len(audio_data) == data_size:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–π—Ç—ã –≤ numpy array –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
                    import numpy as np
                    audio_array = np.frombuffer(audio_data, dtype='float32')
                    # –ò–∑–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º—É —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å outdata
                    audio_array = audio_array.reshape(-1, 1)  # (frames, channels)
                
                    if len(self.audio_buffer) < self.buffer_size:
                        self.audio_buffer.append(audio_array)
                    else:
                        # –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø–æ–ª–æ–Ω, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç
                        self.audio_buffer.pop(0)
                        self.audio_buffer.append(audio_array)
                else: 
                    logger.warning(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –ø–æ–ª—É—á–µ–Ω–æ {len(audio_data)} –∏–∑ {data_size} –±–∞–π—Ç")    
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–µ–º–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def test_audio_system(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            import sounddevice as sd
            import numpy as np
        
            logger.info("üîä –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã...")
        
            # –¢–µ—Å—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            duration = 2.0
            sample_rate = 44100
            frequency = 440  # –õ—è –ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã
        
            t = np.linspace(0, duration, int(sample_rate * duration), endpoint=False)
            tone = 0.3 * np.sin(2 * np.pi * frequency * t)
        
            logger.info("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–Ω–∞...")
            sd.play(tone, sample_rate)
            sd.wait()
            logger.info("‚úÖ –¢–µ—Å—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
        
            # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏
            logger.info("üé§ –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (5 —Å–µ–∫—É–Ω–¥)...")
            recording = sd.rec(int(5 * sample_rate), samplerate=sample_rate, channels=1)
            sd.wait()
        
            max_amplitude = np.max(np.abs(recording))
            logger.info(f"üé§ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –º–∞–∫—Å. –∞–º–ø–ª–∏—Ç—É–¥–∞: {max_amplitude:.4f}")
        
            if max_amplitude < 0.01:
                logger.warning("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –æ—á–µ–Ω—å —Ç–∏—Ö–∏–π")
            else:
                logger.info("‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∞—É–¥–∏–æ: {e}")

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        try:
            if self.is_active:
                self.end_call()
            else:
                self.stop_audio_streams()
            event.accept()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ –∑–≤–æ–Ω–∫–∞: {e}")
            event.accept()