import time
import cv2
import numpy as np
import pyaudio
import threading
from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QLabel, QPushButton, 
                             QHBoxLayout, QMessageBox)
from PyQt5.QtCore import Qt, QTimer, pyqtSignal
from PyQt5.QtGui import QImage, QPixmap
import logging

logger = logging.getLogger('dialog_gui')

class CallWindow(QDialog):
    """–û–∫–Ω–æ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ –∑–≤–æ–Ω–∫–∞"""
    
    call_ended = pyqtSignal(str)  # call_id
    call_accepted = pyqtSignal(str)  # call_id
    call_rejected = pyqtSignal(str)  # call_id
    
    def __init__(self, username, call_type, call_id, is_outgoing=True, parent=None):
        super().__init__(parent)
        self.username = username
        self.call_type = call_type  # 'audio' –∏–ª–∏ 'video'
        self.call_id = call_id
        self.is_outgoing = is_outgoing
        self.is_active = False
        self.audio_active = True
        self.video_active = True
        
        # –î–ª—è –∞—É–¥–∏–æ
        self.audio = pyaudio.PyAudio()
        self.audio_stream_in = None
        self.audio_stream_out = None
        self.audio_thread = None
        self.stop_audio = False
        
        # –î–ª—è –≤–∏–¥–µ–æ
        self.video_capture = None
        self.video_thread = None
        self.stop_video = False
        
        self.init_ui()
        
    def init_ui(self):
        call_type_text = "–í–∏–¥–µ–æ" if self.call_type == 'video' else "–ê—É–¥–∏–æ"
        direction_text = "–ò—Å—Ö–æ–¥—è—â–∏–π" if self.is_outgoing else "–í—Ö–æ–¥—è—â–∏–π"
        self.setWindowTitle(f'{call_type_text} –∑–≤–æ–Ω–æ–∫ {direction_text} - {self.username}')
        self.setFixedSize(600, 500)
        
        layout = QVBoxLayout()
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel(f"{call_type_text} –∑–≤–æ–Ω–æ–∫ —Å {self.username}")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("""
            font-size: 20px; 
            font-weight: bold; 
            color: #2c3e50;
            margin-bottom: 10px;
        """)
        layout.addWidget(title)
        
        # –°—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞
        self.status_label = QLabel("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è..." if self.is_outgoing else "–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫...")
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.setStyleSheet("font-size: 14px; color: #7f8c8d;")
        layout.addWidget(self.status_label)
        
        # –í–∏–¥–µ–æ –æ–±–ª–∞—Å—Ç—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–µ–æ –∑–≤–æ–Ω–∫–æ–≤)
        if self.call_type == 'video':
            video_layout = QHBoxLayout()
            
            # –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
            self.local_video_label = QLabel("–õ–æ–∫–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞")
            self.local_video_label.setAlignment(Qt.AlignCenter)
            self.local_video_label.setFixedSize(240, 180)
            self.local_video_label.setStyleSheet("""
                QLabel {
                    background-color: #34495e;
                    border: 2px solid #2c3e50;
                    border-radius: 8px;
                    color: #ecf0f1;
                    font-size: 12px;
                }
            """)
            video_layout.addWidget(self.local_video_label)
            
            # –£–¥–∞–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
            self.remote_video_label = QLabel("–£–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            self.remote_video_label.setAlignment(Qt.AlignCenter)
            self.remote_video_label.setFixedSize(240, 180)
            self.remote_video_label.setStyleSheet("""
                QLabel {
                    background-color: #34495e;
                    border: 2px solid #2c3e50;
                    border-radius: 8px;
                    color: #ecf0f1;
                    font-size: 12px;
                }
            """)
            video_layout.addWidget(self.remote_video_label)
            
            layout.addLayout(video_layout)
        else:
            # –î–ª—è –∞—É–¥–∏–æ –∑–≤–æ–Ω–∫–∞ - –∏–∫–æ–Ω–∫–∞
            audio_icon = QLabel("üéß")
            audio_icon.setAlignment(Qt.AlignCenter)
            audio_icon.setStyleSheet("font-size: 80px; margin: 20px;")
            layout.addWidget(audio_icon)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators_layout = QHBoxLayout()
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        self.mic_indicator = QLabel("üé§")
        self.mic_indicator.setAlignment(Qt.AlignCenter)
        self.mic_indicator.setStyleSheet("font-size: 20px;")
        indicators_layout.addWidget(self.mic_indicator)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–∞–º–µ—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–µ–æ)
        if self.call_type == 'video':
            self.camera_indicator = QLabel("üìπ")
            self.camera_indicator.setAlignment(Qt.AlignCenter)
            self.camera_indicator.setStyleSheet("font-size: 20px;")
            indicators_layout.addWidget(self.camera_indicator)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.connection_indicator = QLabel("üî¥")
        self.connection_indicator.setAlignment(Qt.AlignCenter)
        self.connection_indicator.setStyleSheet("font-size: 20px;")
        indicators_layout.addWidget(self.connection_indicator)
        
        layout.addLayout(indicators_layout)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        # –ö–Ω–æ–ø–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        self.mic_btn = QPushButton("üé§ –í—ã–∫–ª")
        self.mic_btn.setFixedSize(80, 40)
        self.mic_btn.clicked.connect(self.toggle_microphone)
        buttons_layout.addWidget(self.mic_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –∫–∞–º–µ—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–µ–æ)
        if self.call_type == 'video':
            self.camera_btn = QPushButton("üìπ –í—ã–∫–ª")
            self.camera_btn.setFixedSize(80, 40)
            self.camera_btn.clicked.connect(self.toggle_camera)
            buttons_layout.addWidget(self.camera_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
        self.end_call_btn = QPushButton("üìû –ó–∞–≤–µ—Ä—à–∏—Ç—å")
        self.end_call_btn.setFixedSize(120, 50)
        self.end_call_btn.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                border-radius: 8px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
        """)
        self.end_call_btn.clicked.connect(self.end_call)
        buttons_layout.addWidget(self.end_call_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö)
        if not self.is_outgoing:
            self.accept_call_btn = QPushButton("üìû –ü—Ä–∏–Ω—è—Ç—å")
            self.accept_call_btn.setFixedSize(120, 50)
            self.accept_call_btn.setStyleSheet("""
                QPushButton {
                    background-color: #2ecc71;
                    color: white;
                    border: none;
                    border-radius: 8px;
                    font-size: 14px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #27ae60;
                }
            """)
            self.accept_call_btn.clicked.connect(self.accept_call)
            buttons_layout.addWidget(self.accept_call_btn)
            
            # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
            self.reject_call_btn = QPushButton("üìû –û—Ç–∫–ª–æ–Ω–∏—Ç—å")
            self.reject_call_btn.setFixedSize(120, 50)
            self.reject_call_btn.setStyleSheet("""
                QPushButton {
                    background-color: #e74c3c;
                    color: white;
                    border: none;
                    border-radius: 8px;
                    font-size: 14px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #c0392b;
                }
            """)
            self.reject_call_btn.clicked.connect(self.reject_call)
            buttons_layout.addWidget(self.reject_call_btn)
        
        layout.addLayout(buttons_layout)
        
        self.setLayout(layout)
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        self.ui_timer = QTimer()
        self.ui_timer.timeout.connect(self.update_ui)
        self.ui_timer.start(100)
        
    def update_ui(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∑–≤–æ–Ω–∫–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        if self.audio_active:
            self.mic_indicator.setText("üé§")
            self.mic_btn.setText("üé§ –í–∫–ª")
        else:
            self.mic_indicator.setText("üîá")
            self.mic_btn.setText("üé§ –í—ã–∫–ª")
            
        if self.call_type == 'video':
            if self.video_active:
                self.camera_indicator.setText("üìπ")
                self.camera_btn.setText("üìπ –í–∫–ª")
            else:
                self.camera_indicator.setText("üì∑‚ùå")
                self.camera_btn.setText("üìπ –í—ã–∫–ª")
        
        if self.is_active:
            self.connection_indicator.setText("üü¢")
            self.status_label.setText("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            self.connection_indicator.setText("üü°")
            
    def start_call(self):
        """–ù–∞—á–∞—Ç—å –∑–≤–æ–Ω–æ–∫"""
        self.is_active = True
        self.start_audio()
        if self.call_type == 'video':
            self.start_video()
            
    def accept_call(self):
        """–ü—Ä–∏–Ω—è—Ç—å –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫"""
        self.is_active = True
        if hasattr(self, 'accept_call_btn'):
            self.accept_call_btn.hide()
        if hasattr(self, 'reject_call_btn'):
            self.reject_call_btn.hide()
        self.start_audio()
        if self.call_type == 'video':
            self.start_video()
        self.call_accepted.emit(self.call_id)
        
    def start_audio(self):
        """–ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ"""
        try:
            # –§–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ
            format = pyaudio.paInt16
            channels = 1
            rate = 44100
            chunk = 1024
            
            # –í—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫ (–º–∏–∫—Ä–æ—Ñ–æ–Ω)
            self.audio_stream_in = self.audio.open(
                format=format,
                channels=channels,
                rate=rate,
                input=True,
                frames_per_buffer=chunk
            )
            
            # –í—ã—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫ (–¥–∏–Ω–∞–º–∏–∫–∏)
            self.audio_stream_out = self.audio.open(
                format=format,
                channels=channels,
                rate=rate,
                output=True,
                frames_per_buffer=chunk
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∞—É–¥–∏–æ
            self.stop_audio = False
            self.audio_thread = threading.Thread(target=self.capture_audio)
            self.audio_thread.daemon = True
            self.audio_thread.start()
            
            logger.info("–ê—É–¥–∏–æ –ø–æ—Ç–æ–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—É–¥–∏–æ: {e}")
            
    def capture_audio(self):
        """–ó–∞—Ö–≤–∞—Ç –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        while not self.stop_audio and self.audio_active:
            try:
                if self.audio_stream_in and self.audio_active:
                    data = self.audio_stream_in.read(1024, exception_on_overflow=False)
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–µ—Ç—å
                    # self.send_audio_data(data)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∞—É–¥–∏–æ: {e}")
                break
                
    def start_video(self):
        """–ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ"""
        try:
            self.video_capture = cv2.VideoCapture(0)
            if not self.video_capture.isOpened():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É")
                return
                
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤–∏–¥–µ–æ
            self.stop_video = False
            self.video_thread = threading.Thread(target=self.capture_video)
            self.video_thread.daemon = True
            self.video_thread.start()
            
            logger.info("–í–∏–¥–µ–æ –∑–∞—Ö–≤–∞—Ç –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–∏–¥–µ–æ: {e}")
            
    def capture_video(self):
        """–ó–∞—Ö–≤–∞—Ç –≤–∏–¥–µ–æ —Å –∫–∞–º–µ—Ä—ã"""
        while not self.stop_video and self.video_active:
            try:
                if self.video_capture and self.video_active:
                    ret, frame = self.video_capture.read()
                    if ret:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BGR –≤ RGB
                        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                        
                        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
                        frame_resized = cv2.resize(frame_rgb, (240, 180))
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ QImage
                        h, w, ch = frame_resized.shape
                        bytes_per_line = ch * w
                        q_img = QImage(frame_resized.data, w, h, bytes_per_line, QImage.Format_RGB888)
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ QLabel
                        self.local_video_label.setPixmap(QPixmap.fromImage(q_img))
                        
                        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–¥—Ä —á–µ—Ä–µ–∑ —Å–µ—Ç—å
                        # encoded_frame = cv2.imencode('.jpg', frame_resized)[1].tobytes()
                        # self.send_video_data(encoded_frame)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –≤–∏–¥–µ–æ: {e}")
                break
                
    def update_remote_video(self, frame_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
        if self.call_type == 'video' and hasattr(self, 'remote_video_label'):
            try:
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–∞–¥—Ä
                frame = cv2.imdecode(np.frombuffer(frame_data, np.uint8), cv2.IMREAD_COLOR)
                if frame is not None:
                    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                    frame_resized = cv2.resize(frame_rgb, (240, 180))
                    
                    h, w, ch = frame_resized.shape
                    bytes_per_line = ch * w
                    q_img = QImage(frame_resized.data, w, h, bytes_per_line, QImage.Format_RGB888)
                    
                    self.remote_video_label.setPixmap(QPixmap.fromImage(q_img))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
                
    def play_audio_data(self, audio_data):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö"""
        if self.audio_stream_out and self.audio_active:
            try:
                self.audio_stream_out.write(audio_data)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
                
    def toggle_microphone(self):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω"""
        self.audio_active = not self.audio_active
        logger.info(f"–ú–∏–∫—Ä–æ—Ñ–æ–Ω {'–≤–∫–ª—é—á–µ–Ω' if self.audio_active else '–≤—ã–∫–ª—é—á–µ–Ω'}")
        
    def toggle_camera(self):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É"""
        if self.call_type == 'video':
            self.video_active = not self.video_active
            if not self.video_active and hasattr(self, 'local_video_label'):
                self.local_video_label.clear()
                self.local_video_label.setText("–ö–∞–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞")
            logger.info(f"–ö–∞–º–µ—Ä–∞ {'–≤–∫–ª—é—á–µ–Ω–∞' if self.video_active else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}")
            
    def end_call(self):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫"""
        self.stop_call()
        self.call_ended.emit(self.call_id)
        self.close()
        
    def reject_call(self):
        """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–≤–æ–Ω–æ–∫"""
        self.stop_call()
        self.call_rejected.emit(self.call_id)
        self.close()
        
    def stop_call(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–≤–æ–Ω–∫–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.stop_audio = True
            self.stop_video = True
            
            if self.audio_stream_in:
                self.audio_stream_in.stop_stream()
                self.audio_stream_in.close()
                
            if self.audio_stream_out:
                self.audio_stream_out.stop_stream()
                self.audio_stream_out.close()
                
            if self.video_capture:
                self.video_capture.release()
                
            if self.audio_thread and self.audio_thread.is_alive():
                self.audio_thread.join(timeout=1.0)
                
            if self.video_thread and self.video_thread.is_alive():
                self.video_thread.join(timeout=1.0)
                
            self.audio.terminate()
            
            logger.info("–†–µ—Å—É—Ä—Å—ã –∑–≤–æ–Ω–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–≤–æ–Ω–∫–∞: {e}")
            
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.stop_call()
        event.accept()