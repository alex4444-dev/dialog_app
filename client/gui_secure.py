import sys
import os
import threading
import time
import logging
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                             QHBoxLayout, QTabWidget, QAction, QMenu, 
                             QMessageBox, QStatusBar, QTextEdit, QDialog,
                             QSystemTrayIcon, QStyle, QDesktopWidget)
from PyQt5.QtCore import Qt, pyqtSignal, QTimer
from PyQt5.QtGui import QIcon

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.insert(0, current_dir)

try:
    from network_secure import SecureNetworkClient
    from auth_window import AuthWindow
    from users_panel import UsersPanel
    from chat_window import ChatWindow
    from notifications import NotificationWindow
    from call_window import CallWindow
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏
try:
    from styles.main_style import MAIN_WINDOW_STYLE
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç–∏–ª–µ–π: {e}")
    MAIN_WINDOW_STYLE = ""

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger('dialog_gui')

class SecureMainWindow(QMainWindow):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç—ã –∫–ª–∞—Å—Å–∞
    sig_message_received = pyqtSignal(str, str)
    sig_user_list_updated = pyqtSignal(list)
    sig_connection_status = pyqtSignal(str)
    sig_message_status = pyqtSignal(str, str)
    sig_call_received = pyqtSignal(str, str, str, str)  # action, username, call_type, call_id
    
    def __init__(self, network_client, username):
        super().__init__()
        self.network_client = network_client
        self.username = username
        self.active_chats = {}
        self.update_thread = None
        self.is_authenticated = True
        self.pending_messages = {}
        self.notifications_enabled = True
        self.active_notifications = []
        
        # –î–ª—è –∑–≤–æ–Ω–∫–æ–≤
        self.active_calls = {}
        self.pending_calls = {}
        
        # –°—Ä–∞–∑—É –ø–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∫ —Å–ª–æ—Ç–∞–º
        self.sig_message_received.connect(self.handle_message)
        self.sig_user_list_updated.connect(self.update_user_list)
        self.sig_connection_status.connect(self.update_connection_status)
        self.sig_message_status.connect(self.handle_message_status)
        self.sig_call_received.connect(self.handle_call)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–≤–æ–Ω–∫–æ–≤
        self.network_client.set_call_handler(self.handle_incoming_call)
        
        self.init_ui()
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle(f'üí¨ –î–∏–∞–ª–æ–≥ - –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.username})')
        self.setGeometry(100, 100, 1000, 700)
        self.setStyleSheet(MAIN_WINDOW_STYLE)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QHBoxLayout(central_widget)
        main_layout.setSpacing(12)
        main_layout.setContentsMargins(12, 12, 12, 12)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        self.users_panel = UsersPanel()
        self.users_panel.setFixedWidth(280)
        main_layout.addWidget(self.users_panel)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —á–∞—Ç—ã
        self.tabs = QTabWidget()
        self.tabs.setTabsClosable(True)
        self.tabs.tabCloseRequested.connect(self.close_chat_tab)
        self.tabs.currentChanged.connect(self.on_tab_changed)
        main_layout.addWidget(self.tabs)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        self.create_system_tab()
        
        # –ü–∞–Ω–µ–ª—å –º–µ–Ω—é
        self.create_menu()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.statusBar().showMessage(f'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫–∞–∫: {self.username}')
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–∞–Ω–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.users_panel.user_selected.connect(self.open_chat)
        self.users_panel.refresh_requested.connect(self.refresh_user_list)
        self.users_panel.call_requested.connect(self.start_call)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π
        self.setup_system_tray()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—Ç—É –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
        self.start_messaging()
        
        logger.info("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Å–∏–≥–Ω–∞–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
        
    def setup_system_tray(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è"""
        if QSystemTrayIcon.isSystemTrayAvailable():
            self.tray_icon = QSystemTrayIcon(self)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É
            self.tray_icon.setIcon(self.style().standardIcon(QStyle.SP_ComputerIcon))
            self.tray_icon.setToolTip("–î–∏–∞–ª–æ–≥ - –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ç—Ä–µ—è
            tray_menu = QMenu()
            
            show_action = tray_menu.addAction("–ü–æ–∫–∞–∑–∞—Ç—å/–°–∫—Ä—ã—Ç—å")
            show_action.triggered.connect(self.toggle_window)
            
            tray_menu.addSeparator()
            
            exit_action = tray_menu.addAction("–í—ã—Ö–æ–¥")
            exit_action.triggered.connect(self.close_application)
            
            self.tray_icon.setContextMenu(tray_menu)
            self.tray_icon.activated.connect(self.tray_icon_activated)
            self.tray_icon.show()
            
            logger.info("–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            self.tray_icon = None
            logger.warning("–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
    def tray_icon_activated(self, reason):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–∫–æ–Ω–∫–∏ –≤ —Ç—Ä–µ–µ"""
        if reason == QSystemTrayIcon.DoubleClick:
            self.toggle_window()
            
    def toggle_window(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –æ–∫–Ω–æ"""
        if self.isVisible():
            if self.isMinimized():
                self.showNormal()
            else:
                self.hide()
        else:
            self.show()
            self.activateWindow()
            
    def show_notification(self, title, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        if not self.notifications_enabled:
            return
            
        # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = NotificationWindow(title, message)
        notification.show_notification()
        self.active_notifications.append(notification)
        
        # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
        def remove_notification():
            if notification in self.active_notifications:
                self.active_notifications.remove(notification)
                
        notification.close_animation.finished.connect(remove_notification)
        
        # –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if self.tray_icon:
            self.tray_icon.showMessage(
                title,
                message,
                QSystemTrayIcon.Information,
                3000
            )
        
    def on_tab_changed(self, index):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–∫–∏"""
        if index > 0:  # –ù–µ —Å–∏—Å—Ç–µ–º–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
            widget = self.tabs.widget(index)
            if hasattr(widget, 'set_active'):
                widget.set_active(True)
                # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
                for username, chat in self.active_chats.items():
                    if chat != widget and hasattr(chat, 'set_active'):
                        chat.set_active(False)
        
    def start_messaging(self):
        """–ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—Ç—ã –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å—Ç–∞—Ç—É—Å–æ–≤")
        self.network_client.set_message_handler(self.handle_incoming_message)
        self.network_client.set_status_handler(self.handle_incoming_status)
        self.sig_connection_status.emit("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        audio_ready = self.network_client.setup_universal_audio()
        if audio_ready:
            self.system_chat.append(f"‚úÖ –ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞: {self.network_client.audio_system}")
        else:
            self.system_chat.append("‚ö†Ô∏è –ê—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

        # –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat
        self.network_client.start_heartbeat()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        self.network_client.send_client_info()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.start_listen_for_updates()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.refresh_user_list()
        
        self.system_chat.append(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∫–∞–∫: {self.username}")
        
    def create_system_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        system_tab = QWidget()
        system_layout = QVBoxLayout(system_tab)
        system_layout.setContentsMargins(12, 12, 12, 12)
        
        self.system_chat = QTextEdit()
        self.system_chat.setReadOnly(True)
        system_layout.addWidget(self.system_chat)
        
        self.tabs.addTab(system_tab, "üìä –°–∏—Å—Ç–µ–º–∞")
        
    def create_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        menubar = self.menuBar()
        
        # –ú–µ–Ω—é –§–∞–π–ª
        file_menu = menubar.addMenu('–§–∞–π–ª')
        
        refresh_action = QAction('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', self)
        refresh_action.triggered.connect(self.refresh_user_list)
        file_menu.addAction(refresh_action)
        
        file_menu.addSeparator()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notifications_menu = file_menu.addMenu('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
        
        self.enable_notifications_action = QAction('–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', self, checkable=True)
        self.enable_notifications_action.setChecked(True)
        self.enable_notifications_action.triggered.connect(self.toggle_notifications)
        notifications_menu.addAction(self.enable_notifications_action)
        
        file_menu.addSeparator()
        
        # –ú–µ–Ω—é –ó–≤–æ–Ω–∫–∏
        calls_menu = menubar.addMenu('üìû –ó–≤–æ–Ω–∫–∏')
        
        call_settings_action = QAction('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤–æ–Ω–∫–æ–≤', self)
        call_settings_action.triggered.connect(self.show_call_settings)
        calls_menu.addAction(call_settings_action)
        
        file_menu.addSeparator()
        
        # –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        logout_action = QAction('üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', self)
        logout_action.triggered.connect(self.logout)
        file_menu.addAction(logout_action)
        
        # –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        exit_action = QAction('‚ùå –í—ã–π—Ç–∏', self)
        exit_action.triggered.connect(self.close_application)
        file_menu.addAction(exit_action)
        
        # –ú–µ–Ω—é –ê–∫–∫–∞—É–Ω—Ç
        account_menu = menubar.addMenu('üë§ –ê–∫–∫–∞—É–Ω—Ç')
        
        profile_action = QAction('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', self)
        profile_action.triggered.connect(self.show_profile)
        account_menu.addAction(profile_action)
        
    def show_call_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤–æ–Ω–∫–æ–≤"""
        QMessageBox.information(self, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤–æ–Ω–∫–æ–≤', 
                              '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ:\n\n'
                              '‚Ä¢ –ú–∏–∫—Ä–æ—Ñ–æ–Ω: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n'
                              '‚Ä¢ –ö–∞–º–µ—Ä–∞: –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n'
                              '‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∏: –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n'
                              '–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞ –∏ –≤–∏–¥–µ–æ.')
        
    def toggle_notifications(self, enabled):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.notifications_enabled = enabled
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        self.system_chat.append(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")
        
    def show_profile(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ"""
        QMessageBox.information(self, 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 
                              f'–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {self.username}\n'
                              f'–°—Ç–∞—Ç—É—Å: Online\n'
                              f'–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(self.active_chats)}\n'
                              f'–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: {len(self.active_calls)}')
        
    def close_application(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
        for call_id in list(self.active_calls.keys()):
            self.end_call(call_id)
            
        self.disconnect_from_server()
        QApplication.quit()
        
    def disconnect_from_server(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        self.stop_listen_for_updates()
        self.network_client.disconnect()
        self.sig_connection_status.emit("‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
        self.is_authenticated = False
        
    def handle_incoming_message(self, from_user, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info(f"SecureMainWindow.handle_incoming_message: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {from_user}: {message}")
        self.sig_message_received.emit(from_user, message)
        
    def handle_incoming_status(self, status, details):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info(f"SecureMainWindow.handle_incoming_status: –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å: {status} - {details}")
        self.sig_message_status.emit(status, details)
        
    def handle_incoming_call(self, action, from_user, call_type=None, call_id=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info(f"SecureMainWindow.handle_incoming_call: –ü–æ–ª—É—á–µ–Ω –∑–≤–æ–Ω–æ–∫: {action} –æ—Ç {from_user}, —Ç–∏–ø: {call_type}, ID: {call_id}")
        self.sig_call_received.emit(action, from_user, call_type, call_id)
        
    def start_listen_for_updates(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.update_thread and self.update_thread.is_alive():
            return
            
        self.update_thread = threading.Thread(target=self.listen_for_updates, daemon=True)
        self.update_thread.start()
        
    def stop_listen_for_updates(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        self.is_authenticated = False
        
    def listen_for_updates(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        while self.network_client.connected and self.is_authenticated:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users = self.network_client.get_user_list()
                if users is not None:
                    self.sig_user_list_updated.emit(users)
                
                time.sleep(20)
            
            except Exception as e:
                error_msg = str(e)
                if "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" in error_msg or "authorized" in error_msg.lower():
                    self.is_authenticated = False
                    self.system_chat.append("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥.")
                    break
                else:
                    self.system_chat.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
                time.sleep(20)
        
    def refresh_user_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if self.network_client.connected and self.is_authenticated:
            users = self.network_client.get_user_list()
            if users:
                self.sig_user_list_updated.emit(users)
        
    def open_chat(self, username):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        logger.info(f"SecureMainWindow.open_chat: –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ —Å {username}")
        
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        clean_username = username.replace("üë§ ", "")
        
        if clean_username in self.active_chats:
            chat_window = self.active_chats[clean_username]
            index = self.tabs.indexOf(chat_window)
            if index >= 0:
                self.tabs.setCurrentIndex(index)
                chat_window.set_active(True)
                logger.info(f"SecureMainWindow.open_chat: –ß–∞—Ç —Å {clean_username} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–µ–≥–æ")
                return
            else:
                # –í–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
                del self.active_chats[clean_username]
                logger.warning(f"SecureMainWindow.open_chat: –í–∫–ª–∞–¥–∫–∞ —á–∞—Ç–∞ —Å {clean_username} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ")
            
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ —á–∞—Ç–∞
        logger.info(f"SecureMainWindow.open_chat: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ —Å {clean_username}")
        chat_window = ChatWindow(clean_username)
        chat_window.message_sent.connect(self.send_message)
        chat_window.unread_count_changed.connect(self.update_tab_title)
        chat_window.call_requested.connect(self.start_call)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É
        tab_index = self.tabs.addTab(chat_window, f"üí¨ {clean_username}")
        self.tabs.setCurrentIndex(tab_index)
        chat_window.set_active(True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç
        self.active_chats[clean_username] = chat_window
        logger.info(f"SecureMainWindow.open_chat: –ß–∞—Ç —Å {clean_username} —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã. –ò–Ω–¥–µ–∫—Å –≤–∫–ª–∞–¥–∫–∏: {tab_index}")
        
    def close_chat_tab(self, index):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∫–∏ —á–∞—Ç–∞"""
        if index == 0:  # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –≤–∫–ª–∞–¥–∫—É
            return
            
        widget = self.tabs.widget(index)
        tab_text = self.tabs.tabText(index)
        
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ active_chats
        username = tab_text.replace("üí¨ ", "")
        
        if username in self.active_chats:
            del self.active_chats[username]
            logger.info(f"SecureMainWindow.close_chat_tab: –ó–∞–∫—Ä—ã—Ç —á–∞—Ç —Å {username}")
            
        self.tabs.removeTab(index)
        
    def update_tab_title(self, username, unread_count):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏"""
        for i in range(self.tabs.count()):
            widget = self.tabs.widget(i)
            if hasattr(widget, 'username') and widget.username == username:
                unread_text = f" ({unread_count}üì©)" if unread_count > 0 else ""
                self.tabs.setTabText(i, f"üí¨ {username}{unread_text}")
                break
        
    def send_message(self, username, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.network_client.connected:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É')
            return
            
        if not self.is_authenticated:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
            return
            
        try:
            logger.info(f"SecureMainWindow.send_message: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}: {message}")
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            message_id = f"{username}_{time.time()}"
            self.pending_messages[message_id] = (username, message)
            
            if self.network_client.send_p2p_message(username, message, message_id):
                self.system_chat.append(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
                logger.info(f"SecureMainWindow.send_message: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                self.system_chat.append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
                logger.error(f"SecureMainWindow.send_message: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"SecureMainWindow.send_message: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}')
            
    def handle_message(self, username, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        logger.info(f"SecureMainWindow.handle_message: –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {username}: {message}")
        
        # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
        self.system_chat.append(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username}: {message}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if username == "system":
            self.system_chat.append(f"üì¢ –°–∏—Å—Ç–µ–º–∞: {message}")
            return
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–∫–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ –∏–ª–∏ —Å–≤–µ—Ä–Ω—É—Ç–æ
        if not self.isActiveWindow() or self.isMinimized():
            self.show_notification(f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username}", message)
            
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã—Ç
        if username not in self.active_chats:
            logger.info(f"SecureMainWindow.handle_message: –ß–∞—Ç —Å {username} –Ω–µ –æ—Ç–∫—Ä—ã—Ç, –æ—Ç–∫—Ä—ã–≤–∞–µ–º...")
            self.open_chat(username)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        if username in self.active_chats:
            logger.info(f"SecureMainWindow.handle_message: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç —Å {username}")
            chat_window = self.active_chats[username]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if chat_window and hasattr(chat_window, 'add_message'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–µ–π—á–∞—Å —ç—Ç–∞ –≤–∫–ª–∞–¥–∫–∞
                current_index = self.tabs.currentIndex()
                current_widget = self.tabs.widget(current_index)
                is_active = current_widget == chat_window
                
                chat_window.set_active(is_active)
                chat_window.add_message(username, message, is_own=False)
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫—É —Å —ç—Ç–∏–º —á–∞—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
                if not is_active:
                    index = self.tabs.indexOf(chat_window)
                    if index >= 0:
                        logger.info(f"SecureMainWindow.handle_message: –í–∫–ª–∞–¥–∫–∞ —á–∞—Ç–∞ —Å {username} –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
                else:
                    logger.info(f"SecureMainWindow.handle_message: –í–∫–ª–∞–¥–∫–∞ —á–∞—Ç–∞ —Å {username} –∞–∫—Ç–∏–≤–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            else:
                logger.error(f"SecureMainWindow.handle_message: –ß–∞—Ç —Å {username} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        else:
            logger.error(f"SecureMainWindow.handle_message: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç —Å {username} –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è")
            self.system_chat.append(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å {username}")
            
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        QApplication.processEvents()
        logger.info(f"SecureMainWindow.handle_message: –ó–ê–í–ï–†–®–ï–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {username}")
            
    def handle_message_status(self, status, details):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        logger.info(f"SecureMainWindow.handle_message_status: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {status} - {details}")
        if status == "delivered":
            self.system_chat.append(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {details}")
        elif status == "failed":
            self.system_chat.append(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {details}")
        elif status == "user_offline":
            self.system_chat.append(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å offline: {details}")
        elif status == "error":
            self.system_chat.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {details}")
            
    def start_call_server_listener(self, call_id):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –º–µ–¥–∏–∞-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        import threading
    
        def listener():
            try:
                if call_id in self.network_client.call_sockets:
                    call_socket = self.network_client.call_sockets[call_id]
                    if call_socket:
                        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                        client_socket, addr = call_socket.accept()
                        self.network_client.call_sockets[call_id] = client_socket
                    
                        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–∫–µ—Ç –≤ –æ–∫–Ω–µ –∑–≤–æ–Ω–∫–∞
                        if call_id in self.active_calls:
                            self.active_calls[call_id]['window'].call_socket = client_socket
                        
                            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∏
                            self.active_calls[call_id]['window'].initialize_real_audio_streams()
                            self.active_calls[call_id]['window'].start_audio_receiver()
                        
                            logger.info(f"–ú–µ–¥–∏–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å {addr}")
                            self.system_chat.append(f"‚úÖ –ê—É–¥–∏–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –∑–≤–æ–Ω–∫–∞ {call_id}: {e}")
    
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=listener, daemon=True)
        thread.start()
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –∑–≤–æ–Ω–∫–∞–º–∏
    def start_call(self, username, call_type):
        """–ù–∞—á–∞—Ç—å –∑–≤–æ–Ω–æ–∫ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        logger.info(f"SecureMainWindow.start_call: –ù–∞—á–∞–ª–æ {call_type} –∑–≤–æ–Ω–∫–∞ —Å {username}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫
        call_id = self.network_client.send_call_request(username, call_type)
        if not call_id:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫')
            return
            
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –∑–≤–æ–Ω–∫–∞
        call_window = CallWindow(username, call_type, call_id, is_outgoing=True, parent=self)
        call_window.call_ended.connect(self.end_call)
        call_window.show()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
        self.active_calls[call_id] = {
            'window': call_window,
            'username': username,
            'type': call_type,
            'outgoing': True
        }
        
        self.pending_calls[call_id] = username
        
        self.system_chat.append(f"üìû –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ {call_type} –∑–≤–æ–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
        
    def handle_call(self, action, from_user, call_type=None, call_id=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞"""
        logger.info(f"SecureMainWindow.handle_call: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–∞: {action} –æ—Ç {from_user}")
        
        if action == 'incoming_call':
            # –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
            self.handle_incoming_call_request(from_user, call_type, call_id)
            
        elif action == 'call_accepted':
            # –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç
            self.handle_call_accepted(from_user, call_id)
            
        elif action == 'call_rejected':
            # –ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω
            self.handle_call_rejected(from_user, call_id)
            
        elif action == 'call_ended':
            # –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
            self.handle_call_ended(from_user, call_id)
            
        elif action == 'call_info':
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–æ–Ω–∫–µ
            self.handle_call_info(from_user, call_id, call_port)
            
    def handle_incoming_call_request(self, from_user, call_type, call_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫"""
        # –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø –ó–í–û–ù–ö–ò
        if call_id in self.active_calls:
            logger.warning(f"–î—É–±–ª–∏—Ä—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫ {call_id}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
            return

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –æ—Ç {from_user}, —Ç–∏–ø: {call_type}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self.show_notification(
            f"üìû –í—Ö–æ–¥—è—â–∏–π {call_type} –∑–≤–æ–Ω–æ–∫",
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {from_user} –∑–≤–æ–Ω–∏—Ç –≤–∞–º"
        )
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –∑–≤–æ–Ω–∫–∞
        call_window = CallWindow(from_user, call_type, call_id, is_outgoing=False, parent=self)
        call_window.call_ended.connect(self.end_call)
        call_window.call_accepted.connect(self.accept_call)
        call_window.call_rejected.connect(self.reject_call)
        call_window.show()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
        self.active_calls[call_id] = {
            'window': call_window,
            'username': from_user,
            'type': call_type,
            'outgoing': False
        }
        
        self.system_chat.append(f"üìû –í—Ö–æ–¥—è—â–∏–π {call_type} –∑–≤–æ–Ω–æ–∫ –æ—Ç {from_user}")
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ –æ–∫–Ω–æ –∑–≤–æ–Ω–∫–∞ –¥–ª—è {call_id}")
        
    def handle_call_accepted(self, from_user, call_id, call_port):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞"""
        logger.info(f"SecureMainWindow.handle_call_accepted: –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {from_user}")
        
        if call_id in self.active_calls:
            call_info = self.active_calls[call_id]
            call_window = call_info['window']
            
            # –ï—Å–ª–∏ —ç—Ç–æ –∏—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä—É
            if call_info['outgoing']:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                if from_user in self.network_client.clients_info:
                    user_info = self.network_client.clients_info[from_user]
                    host = user_info.get('external_ip', 'localhost')
                    port = call_port

                    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä—É
                    if self.network_client.connect_to_call_server(host, port, call_id):
                        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–∫–µ—Ç –≤ –æ–∫–Ω–µ –∑–≤–æ–Ω–∫–∞
                        call_window.call_socket = self.network_client.call_sockets[call_id]
                        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∏
                        call_window.initialize_real_audio_streams()
                        call_window.start_audio_receiver()
                    
                        self.system_chat.append(f"‚úÖ –ê—É–¥–∏–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å {from_user}")
                    else:
                        self.system_chat.append(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—É–¥–∏–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {from_user}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–≤–æ–Ω–æ–∫ –≤ UI
            call_window.start_call()
        
            self.system_chat.append(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {from_user} –ø—Ä–∏–Ω—è–ª –∑–≤–æ–Ω–æ–∫")
        else:
            logger.warning(f"–ó–≤–æ–Ω–æ–∫ {call_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞—Ö")
        
    def handle_call_rejected(self, from_user, call_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞"""
        logger.info(f"SecureMainWindow.handle_call_rejected: –ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {from_user}")
        
        if call_id in self.active_calls:
            call_info = self.active_calls[call_id]
            call_window = call_info['window']
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∑–≤–æ–Ω–∫–∞
            call_window.close()
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
            del self.active_calls[call_id]
            
            QMessageBox.information(self, '–ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {from_user} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–≤–æ–Ω–æ–∫')
            self.system_chat.append(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {from_user} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–≤–æ–Ω–æ–∫")
            
    def handle_call_ended(self, from_user, call_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞"""
        logger.info(f"SecureMainWindow.handle_call_ended: –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {from_user}")
        
        if call_id in self.active_calls:
            call_info = self.active_calls[call_id]
            call_window = call_info['window']
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∑–≤–æ–Ω–∫–∞
            call_window.close()
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
            del self.active_calls[call_id]
            
            self.system_chat.append(f"üìû –ó–≤–æ–Ω–æ–∫ —Å {from_user} –∑–∞–≤–µ—Ä—à–µ–Ω")
        else:
            logger.info(f"–ó–≤–æ–Ω–æ–∫ {call_id} —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
            
    def handle_call_info(self, from_user, call_id, call_port):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–≤–æ–Ω–∫–µ"""
        logger.info(f"SecureMainWindow.handle_call_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–æ–Ω–∫–µ –æ—Ç {from_user}, –ø–æ—Ä—Ç: {call_port}")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–¥–∏–∞-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ—Ä—Ç—É
        
    def accept_call(self, call_id):
        """–ü—Ä–∏–Ω—è—Ç—å –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            logger.info(f"=== –ü–û–ü–´–¢–ö–ê –ü–†–ò–ù–Ø–¢–¨ –ó–í–û–ù–û–ö {call_id} ===")
        
            if call_id not in self.active_calls:
                logger.error(f"‚ùå –ó–≤–æ–Ω–æ–∫ {call_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ active_calls")
                return
            
            call_info = self.active_calls[call_id]
            username = call_info['username']

            # –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø
            if not self.network_client.connected:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
                if not self.network_client.reconnect():
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
                    QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º')
                    return

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä
            call_port = None
            try:
                call_port = self.network_client.start_call_server(call_id)
                if call_port:
                    logger.info(f"üîä –ú–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É: {call_port}")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä–∞

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            logger.info("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
            if self.network_client.send_call_answer(call_id, 'accept', call_port):
                logger.info("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–≤–æ–Ω–æ–∫ –≤ UI
                call_info['window'].accept_call()
                self.system_chat.append(f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–≤–æ–Ω–æ–∫ –æ—Ç {username}")
        
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Ä—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
                if call_port:
                    self.start_call_server_listener(call_id)
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
                QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞')
        
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ accept_call: {e}")
            import traceback
            logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
                    
    
    def reject_call(self, call_id):
        """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫"""
        if call_id in self.active_calls:
            call_info = self.active_calls[call_id]
            username = call_info['username']
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            if self.network_client.send_call_answer(call_id, 'reject'):
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∑–≤–æ–Ω–∫–∞
                call_info['window'].close()
                del self.active_calls[call_id]
                self.system_chat.append(f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–≤–æ–Ω–æ–∫ –æ—Ç {username}")
            else:
                QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞')
                
    def end_call(self, call_id):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–≤–æ–Ω–æ–∫"""
        if call_id not in self.active_calls:  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê –ü–†–û–í–ï–†–ö–ê
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–≤–æ–Ω–æ–∫ {call_id}")
            return
            
        call_info = self.active_calls[call_id]
        username = call_info['username']
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        success = self.network_client.send_call_end(call_id)

        if not success:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞ {call_id}")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞-—Ä–µ—Å—É—Ä—Å—ã
        self.network_client.stop_call(call_id)
            
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∑–≤–æ–Ω–∫–∞
        if 'window' in call_info:
            call_info['window'].close()
            
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
        if call_id in self.active_calls:
            del self.active_calls[call_id]
            
        self.system_chat.append(f"üìû –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–≤–æ–Ω–æ–∫ —Å {username}")
 
    def check_connection(self): 
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.logger.info("=== –ü–†–û–í–ï–†–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø ===")
        self.logger.info(f"connected: {self.connected}")
        self.logger.info(f"server_socket: {self.server_socket}")
        self.logger.info(f"session_token: {'–ï—Å—Ç—å' if self.session_token else '–ù–µ—Ç'}")
        self.logger.info(f"cipher_suite: {'–ï—Å—Ç—å' if self.cipher_suite else '–ù–µ—Ç'}")
    
        if self.connected and self.server_socket:
            try:
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ "ping"
                test_data = {'type': 'heartbeat', 'session_token': self.session_token}
                return self.send_encrypted_message(test_data)
            except:
                return False
        return False


    def update_user_list(self, users):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info(f"SecureMainWindow.update_user_list: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users) if users else 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        self.users_panel.update_users(users)
        
    def update_connection_status(self, status):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.statusBar().showMessage(status)
        self.system_chat.append(f"{status}")

    def logout(self):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        reply = QMessageBox.question(self, '–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 
                                   '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã?', 
                                   QMessageBox.Yes | QMessageBox.No, 
                                   QMessageBox.No)
        
        if reply == QMessageBox.Yes:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
            for call_id in list(self.active_calls.keys()):
                self.end_call(call_id)
                
            self.stop_listen_for_updates()
            self.network_client.logout()
            self.network_client.session_token = None
            self.network_client.username = None
            self.is_authenticated = False
            self.close()
            
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for notification in self.active_notifications:
            notification.close()
            
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
        for call_id in list(self.active_calls.keys()):
            self.end_call(call_id)
            
        self.disconnect_from_server()
        event.accept()

class DialogApplication:
    """–ö–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º - –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é, –∑–∞—Ç–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ"""
    
    def __init__(self):
        self.app = QApplication(sys.argv)
        self.network_client = SecureNetworkClient()
        self.auth_window = None
        self.main_window = None
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å—Ä–∞–∑—É
        self.show_auth_dialog()
        
    def show_auth_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        self.auth_window = AuthWindow(self.network_client)
        self.auth_window.login_success.connect(self.on_login_success)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ —Ñ–æ–Ω–µ
        self.connect_to_server()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = self.auth_window.exec_()
        if result == QDialog.Rejected:
            self.on_auth_cancelled()
        
    def connect_to_server(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        def connect_thread():
            logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...")
            self.auth_window.update_status("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
            
            if self.network_client.connect():
                logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ UI
                self.auth_window.update_status("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É")
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ UI
                self.auth_window.update_status("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                QMessageBox.warning(self.auth_window, '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É')
        
        threading.Thread(target=connect_thread, daemon=True).start()
        
    def on_login_success(self, username):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞"""
        logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
        # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.main_window = SecureMainWindow(self.network_client, username)
        self.main_window.show()
        
    def on_auth_cancelled(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        logger.info("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        self.network_client.disconnect()
        sys.exit(0)

def main():
    app = DialogApplication()
    app.run()
    sys.exit(app.app.exec_())

if __name__ == '__main__':
    main()